; Sun May 19 13:46:00 MSK 2024
; 
;+ (version "3.5")
;+ (build "Build 663")

([CesiumEngine_Class1] of  CeziumControl

	(port "8448"))

([CesiumEngine_Class80000] of  Rule

	(lhs "(CZMLGenerator delay ?del\n	visibility ?vis)\n(Onboard label ?onb)\n?cs (CZMLSpan time ?tim\n	object ?obj\n	options ?ops)\n(Clock0 time ?t ((not= ?obj ?onb)\n                       (> ?t ?tim)))")
	(rhs "(if-let [omo (ru.igis.omtab.OMT/getMapOb ?onb)]\n  (if-let [nmo (ru.igis.omtab.OMT/getMapOb ?obj)]\n    (let [dis (.distanceNM omo nmo)]\n      (if (< dis ?vis)\n        (light.cesium.core/model-leg \n	nmo\n	(+ ?del 4)\n	(read-string (.getDescription nmo))))\n      (modify ?cs time (+ ?t ?del)))))")
	(salience 1)
	(title "czm0:CZML Navob Leg Generation2"))

([Cezium_Class100000] of  CloFunction

	(source "([no sec ops]\n  (let [[c4d1 c4d2] (trace4d no sec ops)\n        lab (.getName no)\n        lab-ops (assoc (ops :label) :text lab)]\n    (model-leg lab lab-ops  (ops :model) c4d1 c4d2)))\n([id label model [tim1 lon1 lat1 alt1] [tim2 lon2 lat2 alt2]]\n  (let [p {:id id\n             :label label\n             :model model\n             :orientation {:velocityReference \"#position\"}\n             :position {:interpolationAlgorithm \"LINEAR\"\n                           :forwardExtrapolationType \"HOLD\"\n                           :cartographicDegrees [tim1 lon1 lat1 alt1 tim2 lon2 lat2 alt2]}}]\n    (send-doc-curt)\n    (send-event \"czml\" (json/write-str p))))")
	(title "model-leg"))

([Cezium_Class100005] of  CloVar

	(source "(volatile! nil)")
	(title "RESPONSE"))

([Cezium_Class100031] of  CloFunction

	(source "(vreset! RESPONSE (read-transit (params :response)))\n{:status 204}")
	(title "response [params]"))

([Cezium_Class110051] of  CloFunction

	(source "(let [drf (or (ops :draft) 0)\n       lat1 (.getLatitude no)\n       lon1 (.getLongitude no)\n       alt1 (- (.getAltitude no) drf)\n       crs (.getCourse no)\n       spd (.getSpeed no)\n       vsd (.getVerticalSpeed no)\n       dis (double (/ (* spd sec) 3600))\n       [lat2 lon2] (seq (.position no (double crs) dis))\n       alt2 (+ alt1 (* vsd sec))\n       tim1 (iso8601curt)\n       tim2 (iso8601futt sec)]\n  [[tim1 lon1 lat1 alt1] [tim2 lon2 lat2 alt2]])")
	(title "trace4d [no sec ops]"))

([Cezium_Class120000] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout @time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout @time-out)))))")
	(title "repeater!"))

([Cezium_Class150000] of  CloFunction

	(source "([]\n  (send-doc (doc)))\n([doc]\n  (send-event \"czml\" doc))\n([_ iso]\n  (send-event \"czml\" (doc iso)))")
	(title "send-doc"))

([Cezium_Class170001] of  CloVar

	(source "(volatile! nil)")
	(title "REQUEST"))

([Cezium_Class180000] of  CloFunction

	(source "(let [p {:id label\n           :label {:scale lab-scl\n                     :pixelOffset {:cartesian2 lab-off}\n                     :heightReference lab-hre\n                     :text label}\n           :billboard {:scale bil-scl\n                            :heightReference bil-hre\n                            :verticalOrigin \"BOTTOM\"\n                            :rotation bil-rot\n                            :image img-url}\n           :position {:cartographicDegrees [tim1 lon1 lat1 alt1 tim2 lon2 lat2 alt2]}}]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "billboard-leg [label lab-scl lab-hre lab-off img-url bil-scl bil-hre bil-rot [tim1 lon1 lat1 alt1] [tim2 lon2 lat2 alt2]]"))

([Cezium_Class200000] of  CloFunction

	(source "(send-doc (doc (iso8601curt)))")
	(title "send-doc-curt []"))

([Cezium_Class200001] of  CloFunction

	(source "(vec (map (fn [[x y]] (Integer/parseInt (str x y) 16)) (partition 2 hex)))")
	(title "dec16 [hex]"))

([Cezium_Class200002] of  CloFunction

	(source "(let [[a r g b] (dec16 lin-color)\n       p {:id label\n           :label {:scale lab-scl\n                     :pixelOffset {:cartesian2 lab-off}\n                     :text label}\n           :ellipsoid {:show  true\n                           :radii {:cartesian [x y z]}\n                           :material {:grid {:color {:rgba [r g b a]}\n                                                    :lineCount {:cartesian2 [16, 16]}\n                                                    :cellAlpha transp}}}\n           :position {:cartographicDegrees [tim1 lon1 lat1 alt1 tim2 lon2 lat2 alt2]}}]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "dome [label lab-scl lab-off [x y z] lin-color transp [tim1 lon1 lat1 alt1] [tim2 lon2 lat2 alt2]]"))

([Cezium_Class200012] of  CloFunction

	(source "([no dis sec ops]\n  (let [[c4d1 c4d2] (trace4d no sec ops)]\n    (navob-leg no dis c4d1 c4d2 ops)))\n([no dis c4d1 c4d2 ops]\n  (let [lab (.getName no)\n         gltf-url (ops :gltf-url)\n         mod-scl (or (ops :model-scale) 1.0)\n         lab-scl (or (ops :label-scale) 0.5)\n         lab-hre (or (ops :label-height-reference) \"NONE\")\n         mod-hre (or (ops :model-height-reference) \"NONE\")\n         lab-off (or (ops :label-offset) [0.0 -40.0])]\n    (if gltf-url \n      (model-leg lab lab-scl lab-hre lab-off gltf-url mod-scl mod-hre c4d1 c4d2)\n      (let [url (.getURL no)\n             bil (or (ops :billboard) (icon-file url) \"no.png\")\n             bil (str BASE-URL IMG-PATH bil)\n             bil-scl (or (ops :billboard-scale) 1.0)\n             bil-hre (or (ops :billboard-height-reference) \"NONE\")\n             vis (or (ops :visibility) 4.0)\n             bil-scl (if (> dis 0) \n                          (min (* 2 bil-scl) (* bil-scl 0.1 (/ vis dis)))\n                          bil-scl)\n             bil-rot (or (ops :billboarg-rotation) 0)]\n        (billboard-leg lab lab-scl lab-hre lab-off bil bil-scl bil-hre bil-rot c4d1 c4d2)))))")
	(title "navob-leg"))

([Cezium_Class210000] of  CloFunction

	(source "(def BASE-URL url)")
	(title "base-url [url]"))

([Cezium_Class210001] of  CloVar

	(source "\"\"")
	(title "BASE-URL"))

([Cezium_Class210002] of  CloVar

	(source "\"img/\"")
	(title "IMG-PATH"))

([Cezium_Class240000] of  CloFunction

	(source ";; from, to - sec after (before, if negative) current time\n(let [[a r g b] (dec16 color)\n        fiso (iso8601futt from)\n        tiso (iso8601futt to)\n        N (count points)\n        step (/ (- to from) N)\n        reso (inc (max step 1))\n        pts (vec (flatten (map #(cons %1 %2) (range N) points)))\n        p {:id id\n            :availability (str fiso \"/\" tiso)\n            :path {:width wid\n                      :material {:solidColor {:color {:rgba [r g b a]}}}\n                      :resolution reso}\n            :position {:interpolationAlgorithm \"LINEAR\"\n                            :epoch fiso\n                            :cartographicDegrees pts}}]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "path [id [from to] wid color points]"))

([Cezium_Class250000] of  CloFunction

	(source ";; from, to - sec after (before, if negative) current time\n(let [[a r g b] (dec16 color)\n        pts (llp-czcoords llp alt pts?)\n        p {:id id\n            :name name\n            :polyline {:width wid\n                           :material {:solidColor {:color {:rgba [r g b a]}}}\n                           :clampToGround (= alt 0)\n                           :positions {:cartographicDegrees pts}}}\n        p (if-let [[from to] from-to]\n             (assoc p :availability (str (iso8601futt from) \"/\" (iso8601futt to)))\n             p)]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "polyline [id from-to llp alt wid color name pts?]"))

([Cezium_Class270000] of  CloFunction

	(source ";; from, to - sec after (before, if negative) current time\n(let [[a r g b] (dec16 color)\n        pts (llp-czcoords llp alt pts?)\n        p {:id id\n            :name name\n            :polygon {:outline true\n                           :outlineWidth wid\n                           :outlineColor {:rgba [r g b a]}\n                           :material {:solidColor {:color {:rgba\n                             (let [[a r g b] (or (if fill (dec16 fill)) (dec16 \"00000000\"))]	                               [r g b a])}}}\n                           :perPositionHeight true\n                           :positions {:cartographicDegrees pts}}}\n        p (if-let [[from to] from-to]\n             (assoc p :availability (str (iso8601futt from) \"/\" (iso8601futt to)))\n             p)]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "polygon [id from-to llp alt wid color fill name pts?]"))

([Cezium_Class280000] of  CloFunction

	(source ";; radius, height - meters\n(let [[a r g b] (dec16 color)\n        p {:id id\n            :name name\n            :ellipse {:semiMinorAxis radm\n                         :semiMajorAxis radm\n                         :height alt\n                         :material {:solidColor {:color {:rgba\n                           (let [[a r g b] (or (if fill (dec16 fill)) (dec16 \"00000000\"))]	                             [r g b a])}}}\n                         :outline true\n                         :outlineWidth wid\n                         :outlineColor {:rgba [r g b a]}}\n            :position {:cartographicDegrees [clo cla alt]}}\n        p (if-let [[from to] from-to]\n             (assoc p :availability (str (iso8601futt from) \"/\" (iso8601futt to)))\n             p)]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "circle [id from-to [cla clo] radm alt wid color fill name]"))

([Cezium_Class300000] of  CloProgram

	(cloFunctions
		[Cezium_Class300002]
		[Cezium_Class300003]
		[Cezium_Class300004])
	(cloNamespace [Cezium_Class300001])
	(title "3D Bodies Light"))

([Cezium_Class300001] of  CloNamespace

	(source "(:require\n  [light.cesium.core :as cs])\n(:import ru.igis.omtab.NavOb)")
	(title "light.d3.bodies"))

([Cezium_Class300002] of  CloFunction

	(source ";; points-ring [center radius altitude points-number]\n(let [s (double (/ 360 N))\n       degs (range 0 (* N s) s)]\n  (vec (map #(concat (reverse (NavOb/position cla clo % rad)) [alt]) degs)))")
	(title "points-ring [[cla clo] rad alt N]"))

([Cezium_Class300003] of  CloFunction

	(source "(if (empty? (first y))\n ()\n (cons (map first y) (slices (map rest y))))")
	(title "slices [y]"))

([Cezium_Class300004] of  CloFunction

	(source ";; sec = [[rad1 alt1] [rad2 alt2] [rad3 alt3]...]\n(let [rings (map #(points-ring [cla clo] (first %) (second %) N) sec)]\n  (slices rings))")
	(title "rot-body-secs [[cla clo] sec N]"))

([Cezium_Class30026] of  CloProgram

	(cloFunctions
		[Cezium_Class370001]
		[Cezium_Class30033]
		[Cezium_Class30041]
		[Cezium_Class30034]
		[Cezium_Class30036]
		[Cezium_Class100031]
		[Cezium_Class360002]
		[Cezium_Class30037]
		[Cezium_Class30038]
		[Cezium_Class30039]
		[Cezium_Class70005]
		[Cezium_Class80000]
		[Cezium_Class80001]
		[Cezium_Class370002]
		[Cezium_Class360005]
		[CeziumEngineLight_Class1])
	(cloNamespace [Cezium_Class30027])
	(cloVars
		[Cezium_Class30029]
		[Cezium_Class30030]
		[Cezium_Class30032]
		[Cezium_Class30042]
		[Cezium_Class50000]
		[Cezium_Class170001]
		[Cezium_Class100005]
		[Cezium_Class360003]
		[Cezium_Class360004])
	(title "Pro Server Light"))

([Cezium_Class30027] of  CloNamespace

	(source "(:use protege.core)\n(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [cognitect.transit :as t]\n              [light.cesium.core :as lcc]\n              [clojure.core.async :as async :refer [chan alts!! put!]])\n(:import [java.io \n               ByteArrayOutputStream\n               ByteArrayInputStream]\n             ru.igis.omtab.OMT\n             edu.stanford.smi.protege.ui.DisplayUtilities\n             java.awt.Desktop\n             java.net.URI)")
	(title "light.pro.server"))

([Cezium_Class30029] of  CloVar

	(source "8448")
	(title "PORT"))

([Cezium_Class30030] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([Cezium_Class30032] of  CloVar

	(source "nil")
	(title "SERV"))

([Cezium_Class30033] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([Cezium_Class30034] of  CloFunction

	(source "(vreset! CAMERA params)\n(-> (r/response (write-transit (deref (future-call mp-vehicle-request))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\")\n       (r/charset \"UTF-8\"))")
	(title "vehicle [params]"))

([Cezium_Class30036] of  CloFunction

	(source "(let [address (str \"http://localhost:\" PORT)]\n  (println \"Location:\" address)\n  (when (java.awt.Desktop/isDesktopSupported)\n    (.browse (java.awt.Desktop/getDesktop) (java.net.URI. address))))")
	(title "view3D-in-browser []"))

([Cezium_Class30037] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (slurp (str ROOT \"cesium.html\")))\n  (GET \"/test\" [] (slurp (str ROOT \"test.html\")))\n  (GET \"/czml\" [] (lcc/events))\n  (GET \"/vehicle\" [& params] (vehicle params))\n  (GET \"/response\" [& params] (response params))\n  (GET \"/cli-repl\" [& params] (cli-repl params))\n  (route/files \"/\" (do (println [:ROOT-FILES ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Pro Server: Not Found!\"))\n\n(defonce APP\n  (handler/site app-routes))")
	(title "init-server []"))

([Cezium_Class30038] of  CloFunction

	(source "([]\n    (start-server PORT))\n([port]\n  (if (nil? SERV)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port port :join? false})))\n([hm inst]\n  (if-let [port (sv inst \"port\")]\n    (def PORT (read-string port)))\n  (start-server)\n  (println \"Cesium server started on port\" PORT))")
	(title "start-server"))

([Cezium_Class30039] of  CloFunction

	(source "([]\n  (when-let [serv SERV]\n    (.stop serv)\n    (def SERV nil)\n    (println \"Cesium server stopped!\")))\n([hm inst]\n  (stop-server))")
	(title "stop-server"))

([Cezium_Class30041] of  CloFunction

	(source "(if-let [onb @ONBOARD]\n  (if-let [mo (OMT/getMapOb onb)]\n    (let [desc (.getDescription mo)\n          ops (if desc \n                  (read-string desc) \n                  {})\n          p {:vehicle\n               (merge ops\n                 {:name onb\n                  :coord [(.getLatitude mo) (.getLongitude mo)]\n                  :altitude (.getAltitude mo)\n                  :speed (.getSpeed mo)\n                  :course (.getCourse mo)})}]\n      (if-let [req @REQUEST]\n        (do (vreset! REQUEST nil)\n              (assoc p :request req))\n        p))))")
	(title "mp-vehicle-request []"))

([Cezium_Class30042] of  CloVar

	(source "(volatile! nil)")
	(title "ONBOARD"))

([Cezium_Class30043] of  CloProgram

	(cloFunctions
		[Cezium_Class310002]
		[Cezium_Class30047]
		[Cezium_Class30048]
		[Cezium_Class30049]
		[Cezium_Class30050]
		[Cezium_Class30051]
		[Cezium_Class150000]
		[Cezium_Class200000]
		[Cezium_Class30052]
		[Cezium_Class180000]
		[Cezium_Class30054]
		[Cezium_Class30055]
		[Cezium_Class210000]
		[Cezium_Class200001]
		[Cezium_Class200002]
		[Cezium_Class110051]
		[Cezium_Class70000]
		[Cezium_Class100000]
		[Cezium_Class330000]
		[Cezium_Class240000]
		[Cezium_Class250000]
		[Cezium_Class270000]
		[Cezium_Class280000]
		[Cezium_Class340000])
	(cloNamespace [Cezium_Class30044])
	(cloVars
		[Cezium_Class30045]
		[Cezium_Class210001]
		[Cezium_Class210002])
	(title "Cesium Server Light"))

([Cezium_Class30044] of  CloNamespace

	(source "(:require\n    [ring.util.response :as r]\n    [light.async.proc :as asp]\n    [clojure.data.json :as json])\n(:import java.util.Calendar)")
	(title "light.cesium.core"))

([Cezium_Class30045] of  CloVar

	(source "(defonce CZ-CHAN (asp/mk-chan))")
	(title "defo-CZ-CHAN"))

([Cezium_Class30047] of  CloFunction

	(source "(asp/pump-in CZ-CHAN [typ (.trim dat)])")
	(title "send-event [typ dat]"))

([Cezium_Class30048] of  CloFunction

	(source "(let [evt-hr (fn [[typ dat]]\n                   (str \"event: \" typ \"\\ndata: \" dat \"\\n\\n\"))\n       ee (deref (future (asp/pump-out CZ-CHAN)))\n       resp (if (seq ee)\n                 (apply str (map evt-hr ee))\n                 \"\")]\n  (-> (r/response resp)\n         (r/header \"Access-Control-Allow-Origin\" \"*\")\n         (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\")))")
	(title "events []"))

([Cezium_Class30049] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       yar (.get cld Calendar/YEAR )\n       mon (inc (.get cld Calendar/MONTH))\n       dat (.get cld Calendar/DATE)\n       hor (.get cld Calendar/HOUR_OF_DAY)\n       min (.get cld Calendar/MINUTE)\n       sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601curt []"))

([Cezium_Class30050] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       mil (.getTimeInMillis cld)\n       _ (.setTimeInMillis cld (+ mil (* sec 1000)))\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601futt [sec]"))

([Cezium_Class30051] of  CloFunction

	(source "([]\n  (json/write-str {:id \"document\" :version \"1.0\"}))\n([iso]\n  (json/write-str {:id \"document\" :version \"1.0\" :clock {:currentTime iso}}))")
	(title "doc"))

([Cezium_Class30052] of  CloFunction

	(source "(let [p {:id label\n           :availability (str (iso8601curt) \"/\" (iso8601futt span-sec))\n           :label {:scale scale\n                     :pixelOffset {:cartesian2 [8, -24]}\n                     :heightReference \"RELATIVE_TO_GROUND\"\n                     :text label}\n           :billboard {:scale scale\n                            :image img-url}\n           :position {:cartographicDegrees [lon lat alt]}}]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "location [label scale img-url lat lon alt span-sec]"))

([Cezium_Class30054] of  CloFunction

	(source "(let [min-scl 0.25\n       max-scl 1.25\n       scl (min max-scl (- max-scl (/ dist max-dist)))]\n  (location txt scl \"img/arrdn.png\" lat lon 100 60))")
	(title "point-out [txt [lat lon] dist max-dist]"))

([Cezium_Class30055] of  CloFunction

	(source "(def DOC-SENT false)")
	(title "new-doc []"))

([Cezium_Class310002] of  CloFunction

	(source "(if (and (string? url) (not (empty? url)))\n  (last (seq (.split url \"/\"))))")
	(title "icon-file [url]"))

([Cezium_Class330000] of  CloFunction

	(source "(if pts?\n  (let [cpts (map #(list (second %) (first %) alt) llp)]\n    (vec (flatten cpts)))\n  (let [degs (map #(Math/toDegrees %) llp)\n         pts (partition 2 degs)]\n    (llp-czcoords pts alt true)))")
	(title "llp-czcoords [llp alt pts?]"))

([Cezium_Class340000] of  CloFunction

	(source "(let [p {:id id\n           :delete true}]\n  (send-doc-curt)\n  (send-event \"czml\" (json/write-str p)))")
	(title "delete [id]"))

([Cezium_Class360002] of  CloFunction

	(source "(letfn [(cli-repl-chan-out []\n	(loop [[bit ch] (alts!! [CLI-REPL-CHAN] :default :none) bits []]\n	    (if (= bit :none)\n	      bits\n	      (recur (alts!! [CLI-REPL-CHAN] :default :none) (conj bits bit)))))]\n  (def CLI-REPL params)\n  (let [req (deref (future (cli-repl-chan-out)))]\n    ;; (println :REQ req)\n    (write-transit req)))")
	(title "cli-repl [params]"))

([Cezium_Class360003] of  CloVar

	(source "(defonce CLI-REPL-CHAN (chan))")
	(title "defonceCLI-REPL-CHAN"))

([Cezium_Class360004] of  CloVar

	(source "nil")
	(title "CLI-REPL"))

([Cezium_Class360005] of  CloFunction

	(source ";; sexp must be string or quote\n(put! CLI-REPL-CHAN {:sexp (str sexp)})\n(def CLI-REPL :WAIT)\n(clirepl)")
	(title "replcli [sexp]"))

([Cezium_Class370001] of  CloFunction

	(source "(let [bais (ByteArrayInputStream. (.getBytes x \"UTF-8\"))\n        r    (t/reader bais :json)]\n    (.reset bais)\n    (t/read r))")
	(title "read-transit [x]"))

([Cezium_Class370002] of  CloFunction

	(source "([]\n  (clirepl 10))\n([sec]\n  (if (> sec 0)\n    (if (= CLI-REPL :WAIT)\n      (do (Thread/sleep 1000)\n        (clirepl (dec sec)))\n      (read-transit (CLI-REPL :transit)))))")
	(title "clirepl"))

([Cezium_Class40000] of  CloProgram

	(cloFunctions
		[Cezium_Class40002]
		[Cezium_Class40003]
		[Cezium_Class40004]
		[Cezium_Class40005]
		[Cezium_Class40006]
		[Cezium_Class40007]
		[Cezium_Class40008]
		[Cezium_Class40009]
		[Cezium_Class40010]
		[Cezium_Class40011])
	(cloNamespace [Cezium_Class40001])
	(title "Async Processing Light"))

([Cezium_Class40001] of  CloNamespace

	(source "(:require \n  [clojure.core.async :refer [chan alts!! put! <! <!! go timeout close!]])")
	(title "light.async.proc"))

([Cezium_Class40002] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout time-out)))))")
	(title "repeater"))

([Cezium_Class40003] of  CloFunction

	(source "(when (not= @status \"RUN\") \n  (vreset! status \"RUN\")\n  (go (do \n          (while (and (= @status \"RUN\")\n                            (proc-fn))\n                (<! (timeout time-out)))\n          (if (instance? clojure.lang.IFn final-fun) (final-fun))\n          (vreset! status \"STOP\")))\n  @status)")
	(title "start-process [status proc-fn time-out final-fun]"))

([Cezium_Class40004] of  CloFunction

	(source "(vreset! status \"FINISH\")")
	(title "stop-process [status]"))

([Cezium_Class40005] of  CloFunction

	(source "(= @status \"RUN\")")
	(title "running? [status]"))

([Cezium_Class40006] of  CloFunction

	(source "(put! chn val)")
	(title "pump-in [chn val]"))

([Cezium_Class40007] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([Cezium_Class40008] of  CloFunction

	(source "(loop [out []]\n  (if (empty? out)\n    (recur (<!! chn))\n    out))")
	(title "one-out [chn]"))

([Cezium_Class40009] of  CloFunction

	(source "(chan)")
	(title "mk-chan []"))

([Cezium_Class40010] of  CloFunction

	(source "(close! chn)")
	(title "close-chan [chn]"))

([Cezium_Class40011] of  CloFunction

	(source "(go (<! (timeout time))\n  (func))")
	(title "delayer [func time]"))

([Cezium_Class50000] of  CloVar

	(source "(volatile! \n  {:view \"0\"\n   :pitch \"0\"\n   :roll \"0\"})")
	(title "CAMERA"))

([Cezium_Class70000] of  CloFunction

	(source "(let [ncrs (.getCourse nmo)]\n  (if (< (.getSpeed nmo) 0.1)\n  0\n  (let [bon (.bearingsDeg omo nmo)\n         oons (or (< bon 90) (> bon 270))\n         dir (if oons\n                (cond\n                  (= ncrs 0) (if (< bon 180) :LE :RI)\n                  (= ncrs 180) (if (< bon 180) :RI :LE)\n                  (< ncrs 180) :RI \n                  true :LE)\n                (cond\n                  (= ncrs 0) (if (< bon 180) :RI :LE)\n                  (= ncrs 180) (if (< bon 180) :LE :RI)\n                  (< ncrs 180) :LE\n                  true :RI))]\n    (condp = dir\n      :LE 1.57\n      :RI 4.71))))")
	(title "billboard-rotation [nmo omo]"))

([Cezium_Class70005] of  CloFunction

	(source "([hm inst]\n  (lcc/new-doc)\n  (if-let [nobs (seq (OMT/getNavObInstances))]\n    (if-let [sel (DisplayUtilities/pickInstanceFromCollection \n                      nil \n                      (sort-by #(sv % \"label\") nobs) \n                      0 \"Select NavOb\")]\n      (let [lab (sv sel \"label\")]\n        (ssv inst \"onboard\" lab)\n        (vreset! ONBOARD lab)))))\n([lab]\n  (lcc/new-doc)\n  (when-let [inst (first (cls-instances \"CeziumControl\"))]\n    (ssv inst \"onboard\" lab)\n    (vreset! ONBOARD lab)))")
	(title "go-onboard"))

([Cezium_Class80000] of  CloFunction

	(source "(vreset! REQUEST req)\n(if wait-response\n  (vreset! RESPONSE :WAIT))")
	(title "request [req wait-response]"))

([Cezium_Class80001] of  CloFunction

	(source "([]\n  (receive-response 10))\n([sec]\n  (if (> sec 0)\n    (if (= @RESPONSE :WAIT)\n      (do (Thread/sleep 1000)\n        (receive-response (dec sec)))\n      @RESPONSE)))")
	(title "receive-response"))

([CeziumEngineLight_Class1] of  CloFunction

	(source "([]\n  (if-let [serv SERV]\n    (invoke-later (.browse (Desktop/getDesktop) (URI/create (str \"http://localhost:\" PORT))))))\n([hm inst]\n  (start-client))")
	(title "start-client"))

([CeziumEngineLight_Class30001] of  Rule

	(lhs "(CZMLGenerator delay ?del)\n?onb (Onboard label ?lab\n	time ?tim)\n(Clock time ?t (> ?t ?tim))")
	(rhs "(let [onb (deref light.pro.server/ONBOARD)\n       fut (+ ?t ?del)]\n  (if (not= onb ?lab)\n    (modify ?onb time fut label onb)\n    (modify ?onb time fut)))")
	(salience 0)
	(title "czm:Check Onboard"))

([CeziumEngineLight_Class30002] of  Rule

	(lhs "(CZMLGenerator delay ?del\n	visibility ?vis)\n(Onboard label ?onb)\n?cs (CZMLSpan time ?tim\n	object ?obj\n	options ?ops)\n(Clock time ?t (> ?t ?tim))")
	(rhs "(if-let [omo (ru.igis.omtab.OMT/getMapOb ?onb)]\n  (if-let [nmo (ru.igis.omtab.OMT/getMapOb ?obj)]\n    (let [dis (.distanceNM omo nmo)]\n      (if (< dis ?vis)\n        (light.cesium.core/navob-leg \n	nmo\n	dis\n	(+ ?del 2)\n	?ops))\n      (modify ?cs time (+ ?t ?del)))))")
	(salience 1)
	(title "czm:CZML Navob Leg Generation"))

([CeziumEngineLight_Class30003] of  Rule

	(lhs "?cs (CZMLSpan time ?tim\n	object ?obj\n	options ?ops\n	((not (string? ?obj))\n	 (not (string? ?ops))))")
	(rhs "(modify ?cs object (protege.core/sv ?obj \"label\")\n	options (apply hash-map\n		(mapcat #(list (read-string (protege.core/sv % \"keyword\"))\n			(read-string (protege.core/sv % \"argument\"))) ?ops)))")
	(salience 0)
	(title "czm:CZMLSpan Init"))

([CeziumEngineLight_Class40004] of  RuleSet

	(rules
		[CeziumEngineLight_Class30001]
		[CeziumEngineLight_Class30003]
		[CeziumEngineLight_Class30002])
	(templates
		[CZMLGenerator]
		[CZMLSpan]
		[Onboard])
	(title "CZML Generation Set for Scenarios"))

([CeziumEngineLight_Class40005] of  Rule

	(lhs "?moe (MapObEvent0)")
	(rhs "(retract ?moe)")
	(salience -10)
	(title "sim0:RetractMapObEvent0"))

([CeziumEngineLight_Class40006] of  Rule

	(lhs "?c1 (Clock0 time ?t1)\n?c2 (Clock0 time ?t2\n	(< ?t2 ?t1))")
	(rhs "(retract ?c2)")
	(salience 10)
	(title "sim0:RetractSecondClock0"))

([CeziumEngineLight_Class40007] of  Rule

	(lhs "(CZMLGenerator)\n(not Clock0)")
	(rhs "(light.sim/start-sim)")
	(salience 0)
	(title "sim0:Start Simulation"))

([CeziumEngineLight_Class40008] of  RuleSet

	(rules
		[CeziumEngineLight_Class40005]
		[CeziumEngineLight_Class40006]
		[CeziumEngineLight_Class40007])
	(templates
		[Clock0]
		[MapObEvent0])
	(title "CZML Simulation Set"))

([CeziumEngineLight_Class40011] of  CloProgram

	(cloFunctions
		[CeziumEngineLight_Class40015]
		[CeziumEngineLight_Class40016]
		[CeziumEngineLight_Class40017]
		[CeziumEngineLight_Class40018]
		[CeziumEngineLight_Class40019]
		[CeziumEngineLight_Class40020]
		[CeziumEngineLight_Class40021])
	(cloNamespace [CeziumEngineLight_Class40012])
	(cloVars
		[CeziumEngineLight_Class40013]
		[CeziumEngineLight_Class40014])
	(title "Cezium Simulator"))

([CeziumEngineLight_Class40012] of  CloNamespace

	(source "(:require\n  [protege.core :as p]\n  [rete.core :as rete])\n(:import\n  ru.igis.omtab.OMT\n  ru.igis.omtab.Clock\n  ru.igis.omtab.MapOb\n  ru.igis.omtab.NavOb\n  java.util.HashMap\n  edu.stanford.smi.protege.ui.DisplayUtilities\n  java.awt.event.ActionListener)")
	(title "light.sim"))

([CeziumEngineLight_Class40013] of  CloVar

	(source "nil")
	(title "ES-TIMER"))

([CeziumEngineLight_Class40014] of  CloVar

	(source "(volatile! {})")
	(title "EVT-LISTENERS"))

([CeziumEngineLight_Class40015] of  CloFunction

	(source "(doseq[pg (OMT/getPlaygrounds)]\n  (let [al (proxy [ActionListener] []\n	(actionPerformed [evt] \n	  ;; (println :OMT-GEN-EVT evt)\n  	(rete/assert-frame ['MapObEvent0 \n                                                     'status (.getActionCommand evt)\n                                                     'object (.getSource evt)\n                                                     'label (.getName (.getSource evt))])))]\n    (.addActionListener pg al)\n    (vswap! EVT-LISTENERS assoc pg al)))")
	(title "start-evt-listen []"))

([CeziumEngineLight_Class40016] of  CloFunction

	(source "(doseq[[pg al] @EVT-LISTENERS]\n  (.removeActionListener pg al))")
	(title "stop-evt-listen []"))

([CeziumEngineLight_Class40017] of  CloFunction

	(source "(if (and (some? ES-TIMER) (OMT/isRunning))\n  (let [msec (Clock/getClock)\n         sec (int (/ msec 1000))\n         frm ['Clock0 'time sec]]\n    (rete/assert-frame frm)\n    (rete/fire)))")
	(title "work-sim []"))

([CeziumEngineLight_Class40018] of  CloFunction

	(source "(when (some? ES-TIMER)\n  (.cancel ES-TIMER)\n  (def ES-TIMER nil)\n  (stop-evt-listen)\n  (println \"Simulation Stoped...\"))")
	(title "stop-sim []"))

([CeziumEngineLight_Class40019] of  CloFunction

	(source "(if (some? ES-TIMER)\n  (stop-sim))\n(def ES-TIMER (java.util.Timer.))\n(.schedule \n  ES-TIMER \n  (proxy [java.util.TimerTask] [] (run [] (work-sim)))\n  (long 0) \n  (long 1000))\n(start-evt-listen)\n(println \"Simulation Started...\")")
	(title "start-sim []"))

([CeziumEngineLight_Class40020] of  CloFunction

	(source "(stop-sim)\n(start-sim)")
	(title "restart-sim []"))

([CeziumEngineLight_Class40021] of  CloFunction

	(source "(Clock/setClock 0)")
	(title "reset-time []"))

([CeziumEngineLight_Class40022] of  Rule

	(lhs "(CZMLGenerator delay ?del)\n?onb (Onboard label ?lab\n	time ?tim)\n(Clock0 time ?t (> ?t ?tim))")
	(rhs "(let [onb (deref light.pro.server/ONBOARD)\n       fut (+ ?t ?del)]\n  (if (not= onb ?lab)\n    (modify ?onb time fut label onb)\n    (modify ?onb time fut)))")
	(salience 0)
	(title "czm0:Check Onboard"))

([CeziumEngineLight_Class40023] of  Rule

	(lhs "(CZMLGenerator delay ?del\n	visibility ?vis)\n(Onboard label ?onb)\n?cs (CZMLSpan time ?tim\n	object ?obj\n	options ?ops)\n(Clock0 time ?t (> ?t ?tim))")
	(rhs "(if-let [omo (ru.igis.omtab.OMT/getMapOb ?onb)]\n  (if-let [nmo (ru.igis.omtab.OMT/getMapOb ?obj)]\n    (let [dis (.distanceNM omo nmo)]\n      (if (< dis ?vis)\n        (light.cesium.core/navob-leg \n	nmo\n	dis\n	(+ ?del 2)\n	?ops))\n      (modify ?cs time (+ ?t ?del)))))")
	(salience 1)
	(title "czm0:CZML Navob Leg Generation"))

([CeziumEngineLight_Class40026] of  RuleSet

	(rules
		[CeziumEngineLight_Class40022]
		[CeziumEngineLight_Class30003]
		[CeziumEngineLight_Class40023])
	(templates
		[Clock0]
		[CZMLGenerator]
		[CZMLSpan]
		[Onboard])
	(title "CZML Generation Set"))
