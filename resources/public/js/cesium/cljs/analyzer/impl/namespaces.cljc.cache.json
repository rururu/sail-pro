["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs.analyzer.impl.namespaces","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$check-and-remove-as-alias",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ru/clojure/sail-pro/resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","~:line",11,"~:column",7,"~:end-line",11,"~:end-column",32,"~:arglists",["~#list",["~$quote",["^E",[["~$libspec"]]]]],"~:doc","Given a libspec return a map of :as-alias alias, if was present. Return the\n   libspec with :as-alias elided. If the libspec was *only* :as-alias do not\n   return it."],"^5","~$cljs.analyzer.impl.namespaces/check-and-remove-as-alias","^?","resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","^C",32,"~:method-params",["^E",[["^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",11,"~:ret-tag",["^4",["~$clj","~$any","~$cljs.core/IMap"]],"^B",11,"~:max-fixed-arity",1,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Given a libspec return a map of :as-alias alias, if was present. Return the\n   libspec with :as-alias elided. If the libspec was *only* :as-alias do not\n   return it."],"~$check-as-alias-duplicates",["^ ","^=",null,"^>",["^ ","^?","/home/ru/clojure/sail-pro/resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","^@",31,"^A",7,"^B",31,"^C",32,"^D",["^E",["^F",["^E",[["~$as-aliases","~$new-as-aliases"]]]]]],"^5","~$cljs.analyzer.impl.namespaces/check-as-alias-duplicates","^?","resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","^C",32,"^J",["^E",[["^U","^V"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",31,"^N","~$clj-nil","^B",31,"^R",2,"^S",true,"^D",["^E",["^F",["^E",[["^U","^V"]]]]]],"~$elide-aliases-from-libspecs",["^ ","^=",null,"^>",["^ ","^?","/home/ru/clojure/sail-pro/resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","^@",38,"^A",7,"^B",38,"^C",34,"^D",["^E",["^F",["^E",[["~$libspecs"],["^Z","^U"]]]]],"^H","Given libspecs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases.","~:top-fn",["^ ","^M",false,"~:fixed-arity",2,"^R",2,"^J",[["^Z"],["^Z","^U"]],"^D",["^E",[["^Z"],["^Z","^U"]]],"^L",["^E",[null,null]]]],"^5","~$cljs.analyzer.impl.namespaces/elide-aliases-from-libspecs","^?","resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","^C",34,"^[",["^ ","^M",false,"^10",2,"^R",2,"^J",[["^Z"],["^Z","^U"]],"^D",["^E",[["^Z"],["^Z","^U"]]],"^L",["^E",[null,null]]],"^J",[["^Z"],["^Z","^U"]],"^K",null,"^10",2,"^L",["^E",[null,null]],"^A",1,"^M",false,"~:methods",[["^ ","^10",1,"^M",false,"~:tag","^P"],["^ ","^10",2,"^M",false,"^13",["^4",[null,"^P"]]]],"^@",38,"^B",38,"^R",2,"^S",true,"^D",["^E",[["^Z"],["^Z","^U"]]],"^H","Given libspecs, elide all :as-alias. Return a map of :libspecs (filtered)\n   and :as-aliases."],"~$elide-aliases-from-ns-specs",["^ ","^=",null,"^>",["^ ","^?","/home/ru/clojure/sail-pro/resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","^@",55,"^A",7,"^B",55,"^C",34,"^D",["^E",["^F",["^E",[["~$ns-specs"]]]]]],"^5","~$cljs.analyzer.impl.namespaces/elide-aliases-from-ns-specs","^?","resources/public/js/cesium/cljs/analyzer/impl/namespaces.cljc","^C",34,"^J",["^E",[["^15"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",55,"^N",["^4",[null,"^P"]],"^B",55,"^R",1,"^S",true,"^D",["^E",["^F",["^E",[["^15"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:as-alias","~:libspec","~:refer-clojure","~:libspecs","~:as-aliases"]],"~:order",["^1<","^1;","^1?","^1>","^1="]],"^H",null,"^1?",["^ "]]