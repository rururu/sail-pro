["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs.core.async.interop","~:imports",null,"~:requires",["^ ","~$async","~$cljs.core.async","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$p->c",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ru/clojure/sail-pro/resources/public/js/cesium/cljs/core/async/interop.cljs","~:line",13,"~:column",7,"~:end-line",13,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^G",[["~$p"]]]]],"~:doc","EXPERIMENTAL: Puts the promise resolution into a promise-chan and returns it.\n   The value of a rejected promise will be wrapped in a instance of\n   ExceptionInfo, acessible via ex-cause."],"^5","~$cljs.core.async.interop/p->c","^A","resources/public/js/cesium/cljs/core/async/interop.cljs","^E",11,"~:method-params",["^G",[["~$p"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^C",1,"~:variadic?",false,"^B",13,"~:ret-tag","~$any","^D",13,"~:max-fixed-arity",1,"~:fn-var",true,"^F",["^G",["^H",["^G",[["~$p"]]]]],"^I","EXPERIMENTAL: Puts the promise resolution into a promise-chan and returns it.\n   The value of a rejected promise will be wrapped in a instance of\n   ExceptionInfo, acessible via ex-cause."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6","^9","^:","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:promise-error","~:error"]],"~:order",["^X","^W"]],"^I",null,"~:as-aliases",["^ "]]